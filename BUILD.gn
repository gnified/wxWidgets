import("//build/config/precompiled_header.gni")

declare_args() {
  wxwidgets_universal = false
  wxwidgets_shared = true
}

# copy setup file
copy("copy_setup") {
  visibility = [ ":*" ]
  if (is_win && !wxwidgets_universal) {
    sources = [
      "include/wx/msw/setup0.h",
    ]
  } else if (wxwidgets_universal) {
    sources = [
      "include/wx/univ/setup0.h",
    ]
  } else {
    assert(false, "Platform not supported")
  }

  outputs = [
    "$target_out_dir/wx/setup.h",
  ]
}

config("setup_config") {
  visibility = [ ":*" ]
  include_dirs = [ target_out_dir ]
}

group("setup") {
  public_deps = [
    ":copy_setup",
  ]
  public_configs = [ ":setup_config" ]
}

config("wxwidgets_config") {
  visibility = [ ":*" ]
  include_dirs = [ "include" ]
  defines = []

  if (!is_debug) {
    defines += [ "wxDEBUG_LEVEL=0" ]
  }
}

config("wxwidgets_dllimp_config") {
  if (wxwidgets_shared) {
    defines = ["WXUSINGDLL"]
  }
}

precompiled_header("pch") {
  precompiled_header = "wx/wxprec.h"
  precompiled_source = "src/common/dummy.cpp"
}

config("libs") {
  visibility = [ ":*" ]

  if (is_win) {
    libs = [
      "kernel32.lib",
      "user32.lib",
      "gdi32.lib",
      "comdlg32.lib",
      "winspool.lib",
      "winmm.lib",
      "shell32.lib",
      "comctl32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "rpcrt4.lib",
      "advapi32.lib",
      "wsock32.lib",
      "wininet.lib",
    ]
  }
}

config("internal") {
  visibility = [ ":*" ]

  defines = [ "WXBUILDING" ]

  if (is_win) {
    defines += [ "__WXMSW__" ]
  }

  if (wxwidgets_universal) {
    defines += ["__WXUNIVERSAL__"]
  }
}

if (wxwidgets_shared) {
  _wx_target_type = "shared_library"
  set_defaults("wxlibrary") {
    configs = default_shared_library_configs
  }
} else {
  _wx_target_type = "static_library"
  set_defaults("wxlibrary") {
    configs = default_compiler_configs
  }
}

template("wxlibrary") {
  target(_wx_target_type, target_name) {
    forward_variables_from(invoker, "*", [ "output_name" ])
    if (wxwidgets_universal) {
      output_name = "wxwidgets_univ_" + target_name
    } else {
      output_name = "wxwidgets_" + target_name
    }

    if (wxwidgets_shared) {
      sources += [
        "src/msw/version.rc",
      ]
    }
  }
}

_sets_needed = [
  # BASE_SRC
  "BASE_CMN_SRC",
  "BASE_WIN32_SRC",
  "BASE_CMN_HDR",

  # BASE_PLATFORM_HDR
  "BASE_WIN32_HDR",

  # BASE_AND_GUI_SRC
  "BASE_AND_GUI_CMN_SRC",
  "BASE_AND_GUI_WIN32_SRC",

  # LOWLEVEL_SRC
  "MSW_LOWLEVEL_SRC",
  "MSW_DESKTOP_LOWLEVEL_SRC",

  # LOWLEVEL_HDR
  "MSW_LOWLEVEL_HDR",
  "MSW_DESKTOP_LOWLEVEL_HDR",

  # GUI_SRC
  "MSW_SRC",
  "MSW_DESKTOP_SRC",

  # GUI_HDR
  "MSW_HDR",
  "MSW_DESKTOP_HDR",

  "GUI_CMN_SRC",
  "GUI_CMN_HDR",

  # ADVANCED_SRC
  "ADVANCED_CMN_SRC",
  "ADVANCED_MSW_SRC",
  "ADVANCED_MSW_DESKTOP_SRC",
  "ADVANCED_MSW_NATIVE_SRC",

  # ADVANCED_HDR
  "ADVANCED_CMN_HDR",
  "ADVANCED_MSW_HDR",
  "ADVANCED_MSW_DESKTOP_HDR",
  "ADVANCED_MSW_NATIVE_HDR",

  "UNIV_SRC",
  "UNIV_HDR",
  "UNIV_THEMES_SRC",
]

_files_bkl = rebase_path("build/bakefiles/files.bkl", root_build_dir)
files = exec_script("build/get_bakefile_list.py",
                    [ _files_bkl ] + _sets_needed,
                    "scope",
                    [ "build/bakefiles/files.bkl" ])

# If part of base, base would end up with a precompiled header for C as well.
# wxwidgets PCH isn't usable from C though.
source_set("base_c") {
  visibility = [ ":*" ]

  sources = [
    "src/common/extended.c",
  ]

  configs += [
    ":internal",
    ":wxwidgets_config",
  ]

  deps = [
    ":setup",
  ]
}

wxlibrary("base") {
  sources = files.BASE_CMN_SRC  # BASE_SRC
  sources += files.BASE_AND_GUI_CMN_SRC  # BASE_AND_GUI_SRC
  public = rebase_path(files.BASE_CMN_HDR, ".", "include")

  if (is_win) {
    sources += files.BASE_WIN32_SRC
    sources += files.BASE_AND_GUI_WIN32_SRC
    public += rebase_path(files.BASE_WIN32_HDR, ".", "include")

    # Some code expects all of windows.h to be available
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  sources -= [ "src/common/extended.c" ]

  defines = [ "wxUSE_BASE=1", "wxUSE_GUI=0" ]

  if (wxwidgets_shared) {
    defines += ["WXMAKINGDLL_BASE"]
  }

  configs += [
    ":internal",
    ":pch",
  ]

  public_configs = [
    ":libs",
    ":wxwidgets_config",
  ]

  deps = [
    ":base_c",
    ":setup",
    "src/jpeg",
    "src/png",
    "src/regex",
    "src/tiff",
    "src/zlib",
  ]
}

wxlibrary("core") {
  sources = files.GUI_CMN_SRC  # BASE_SRC
  sources += files.BASE_AND_GUI_CMN_SRC  # BASE_AND_GUI_SRC
  public = rebase_path(files.GUI_CMN_HDR, ".", "include")

  if (is_win) {
    # LOWLEVEL_SRC
    sources += files.MSW_LOWLEVEL_SRC
    sources += files.MSW_DESKTOP_LOWLEVEL_SRC
    sources += files.BASE_AND_GUI_WIN32_SRC

    # GUI_SRC
    if (wxwidgets_universal) {
      sources += files.UNIV_SRC
      sources += [
        "src/msw/evtloop.cpp",
      ]
      public += [
        "include/wx/msw/evtloop.h",
      ]
    } else {
      sources += files.MSW_SRC
      sources += files.MSW_DESKTOP_SRC
    }

    # LOWLEVEL_HDR
    public += rebase_path(files.MSW_LOWLEVEL_HDR, ".", "include")
    public += rebase_path(files.MSW_DESKTOP_LOWLEVEL_HDR, ".", "include")

    # GUI_HDR
    public += rebase_path(files.MSW_HDR, ".", "include")
    public += rebase_path(files.MSW_DESKTOP_HDR, ".", "include")

    # Some code expects all of windows.h to be available
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  defines = [ "wxUSE_BASE=0" ]

  if (wxwidgets_shared) {
    defines += ["WXUSINGDLL", "WXMAKINGDLL_CORE"]
  }

  configs += [
    ":internal",
    ":pch",
  ]

  public_configs = [
    ":libs",
    ":wxwidgets_config",
    ":wxwidgets_dllimp_config",
  ]

  deps = [
    ":setup",
    ":base",
    "src/jpeg",
    "src/png",
    "src/regex",
    "src/tiff",
    "src/zlib",
  ]
}

wxlibrary("advanced") {
  sources = files.ADVANCED_CMN_SRC
  public = rebase_path(files.ADVANCED_CMN_HDR, ".", "include")

  if (is_win) {
    sources += files.ADVANCED_MSW_SRC
    sources += files.ADVANCED_MSW_DESKTOP_SRC

    if (wxwidgets_universal) {
      sources += [
        "src/generic/animateg.cpp",
      ]
      public += [
        "wx/generic/animate.h",
      ]
    } else {
      sources += files.ADVANCED_MSW_NATIVE_SRC
      public += rebase_path(files.ADVANCED_MSW_NATIVE_HDR, ".", "include")
    }

    public += rebase_path(files.ADVANCED_MSW_HDR, ".", "include")
    public += rebase_path(files.ADVANCED_MSW_DESKTOP_HDR, ".", "include")

    # Some code expects all of windows.h to be available
    configs -= [ "//build/config/win:lean_and_mean" ]
  }

  if (wxwidgets_shared) {
    defines = ["WXUSINGDLL", "WXMAKINGDLL_ADV"]
  }

  configs += [
    ":internal",
    ":pch",
  ]

  public_configs = [
    ":libs",
    ":wxwidgets_config",
    ":wxwidgets_dllimp_config",
  ]

  deps = [
    ":setup",
    ":core",
    ":base",
  ]
}

group("wxwidgets") {
  public_deps = [
    ":advanced",
    ":base",
    ":core",
    ":setup",
  ]

  public_configs = [ ":wxwidgets_config" ]
}
